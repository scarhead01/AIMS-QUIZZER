import { useMutation } from '@apollo/client'
import React, { useState } from 'react'
import styled from 'styled-components'
import gql from 'graphql-tag'
import { IoClose, IoCompassOutline } from 'react-icons/io5'
import { useForm } from "react-hook-form";
import { MdSettingsApplications } from 'react-icons/md'
const GuessQuest
 = ({ setOpenModal, game, cat,subCat, setNums }) => {

  const [gameIds, setgameId] = useState('')
  const [cats, setcats] = useState('')
  const [gName, setrName] = useState('')
  const [gImgUrl, setrImgUrl] = useState('')
  const [imgCc, setimgCc] = useState('')
  const [gCc, setrCc] = useState('')
  const [gUrl, setrUrl] = useState('')
  const [setNumCurr, setsetNum] = useState("")

  console.log(subCat)
  
  const gameId = "629d6ece913e0070d05a1d41"
  const cName= cat;
  const scName=subCat;
  const setNum = setNums

  const { register, handleSubmit } = useForm({
    defaultValues: {
     gName:'',
     gImgUrl:'',
     imgCc:'',
     gUrl:''
    }
  });

  console.log(cats)
    const [errors,setErrors]= useState({});
  
    const onSubmit = (data) => {
    
     
        setrName(data.gName)
        setrImgUrl(data.gImgUrl)
        setimgCc(data.imgCc)
        setrUrl(data.gUrl)
        addRecipe();
        setOpenModal(false);
    
      };
    
      const [addRecipe,{loading}] = useMutation(ADD_GQUEST,{
        variables:{gameId,cName,scName,setNum,gName,gImgUrl,imgCc,gUrl},
          refetchQueries: [{ query: FETCH_GQUIZ_QUERY, variables:{cName,scName,setNum} }]
      })
      
  return (
    <ModalBackgroundCon>
    <ModalBackground
         onClick={() => {
              setOpenModal(false);
            }}
    />
   <Container>
   
   <TitleCloseBtn
          
          onClick={() => {
            setOpenModal(false);
          }}>
            < IoClose style={{fontSize:25}} />
       
      </TitleCloseBtn>
      <Form>
      <Heading> <h1>Add New Quest</h1> </Heading>
 
 <form onSubmit={handleSubmit(onSubmit)}>

    <label> Question:</label>
<input
  {...register("gName", { required: true })}
  placeholder="Item name"
/>
<label>Image Url</label>
<input
  {...register("gImgUrl", { minLength: 2 })}
  placeholder="image url"
/>
<label>Image Author/Photographer:</label>
<input
  {...register("imgCc", { minLength: 2 })}
  placeholder="image author/photographer"
/>

 <label>Image Copyright Url</label>
<input
  {...register("gUrl", { minLength: 2 })}
  placeholder="recipe source url"
/>
<Submit>
<input type="submit" />
</Submit>

</form>
    </Form>
   </Container>
   </ModalBackgroundCon>
   
  )
}
const ADD_GQUEST = gql`
mutation InsertGuessQuiz($gameId: ID!, $cName: String!, $scName: String!, $setNum: String!, $gName: String!, $gImgUrl: String!, $imgCc: String!,$gUrl: String!) {
  insertGuessQuiz(gameId: $gameId, cName: $cName, scName: $scName, setNum: $setNum, gName: $gName, gImgUrl: $gImgUrl, imgCc: $imgCc, gUrl: $gUrl) {
    gName
    id
  }
}
`

const FETCH_GQUIZ_QUERY = gql`
query ( $cName: String!, $scName: String!, $setNum: String!) {
  getGuessQuizzes(gameId: "629d6ece913e0070d05a1d41", cName: $cName, scName: $scName, setNum: $setNum) {

        
    guessQuiz {
      gName
      gImgUrl
      imgCc
      gUrl
    }
      }
  }

`

const ModalBackground = styled.div`
position: absolute;
left: 0;
width: 100%;
    height: 100vh;
    background-color: rgba(44, 44, 44,0.3);
    top:0;
    display: flex;
    justify-content: center;
    align-items: center;
`
const ModalBackgroundCon = styled.div`
position: absolute;
left: 0;
width: 100%;
    height: 100vh;
    background-color: transparent;
    top:0;
    display: flex;
    justify-content: center;
    align-items: center;
`

const Container = styled.div`
 position: relative;
    margin: auto;
   
   // bottom: 0px;
    width: 500px;
    height: 550px;
    border-radius: 10px;
    background: #d0beff;
    box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
    display: flex;
    flex-direction: column;
   padding: 25px;
   
    -webkit-animation: slide-in-bottom 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
	        animation: slide-in-bottom 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
    /* ----------------------------------------------
 * Generated by Animista on 2022-3-13 10:5:14
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation slide-in-bottom
 * ----------------------------------------
 */
@-webkit-keyframes slide-in-bottom {
  0% {
    -webkit-transform: translateY(1000px);
            transform: translateY(1000px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateY(0);
            transform: translateY(0);
    opacity: 1;
  }
}
@keyframes slide-in-bottom {
  0% {
    -webkit-transform: translateY(1000px);
            transform: translateY(1000px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateY(0);
            transform: translateY(0);
    opacity: 1;
  }
}
`

const Heading = styled.div`
margin: auto;
color: #050016;
& h1{
    color: #050016;
}
`

const TitleCloseBtn = styled.button`
 display: flex;
    justify-content: flex-end;
    background-color: transparent;
    border: none;
    color: #160020;
    cursor: pointer;
    &:hover{
        color:#9539ff;
    }
`

const Form = styled.div`
height:100% ;
width:500px;
display: flex;
//z-index:16 ;
flex-direction: column;
margin:auto ;
& h3{
  text-align: center;
  font-size: 20px;
  margin-bottom: 10px;
  font-weight:600;
}
& input{
  display:block ;
  border: none;
  border-bottom: 2px solid purple;
  background-color: #f1d3ff92;
  width: 80%;
  margin: auto;
  text-transform: capitalize ;
  padding: 10px;
  border-radius: 1px;
  margin-top:10px;
  margin-bottom: 10px;
  &:focus{
    outline: none;
    border-bottom: 3px solid #ff46f6;
  }
}
& label{
  display: block ;
  width: 80%;
  margin: auto;
  margin-top: 25px;
  font-size: 15px;
  font-weight: 600;
}
&.active {
  visibility: visible ;

}
`

const Footer = styled.div`
position: relative;
display:inline-block ;
//width: 100% ;
margin: auto ;
justify-content: center ;
align-items: center ;
`

const Submit = styled.button`
margin: auto ;
padding:10px 25px ;
border-radius: 5px ;
margin:20px;
border: none;
background-color: #c300ff;
cursor: pointer;
color:#f1e9e9 ;
&:hover{
    background-color: #9f01cf;
}
& input{
background-color:transparent ;
border:none ;
color:#f1e9e9;
}
`
const Submit2 = styled.button`
margin: auto ;
padding: 10px 25px;
border-radius: 5px ;
margin:20px;
border: none;
color:#f1e9e9 ;
background-color: #ff008c;
cursor: pointer;
&:hover{
    background-color: #ca006f;
}
`

export default GuessQuest

